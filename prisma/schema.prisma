// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Organisation {
  OrganisationId Int       @id @default(autoincrement())
  Name           String
  Address        String? // Nullable
  PostalCode     String? // Nullable
  City           String? // Nullable
  Phone          String? // Nullable
  Email          String? // Nullable
  Url            String? // Nullable
  Contact        String? // Nullable
  Projects       Project[] @relation("OrganisationProjects") // Added opposite relation
}

model Proposal {
  ProposalId     Int             @id @default(autoincrement())
  Title          String
  Description    String? // Nullable
  Origin         String? // Nullable
  Projects       Project[] @relation("ProposalProjects") // Added opposite relation
  ProposalTopics ProposalTopic[]
}

model Topic {
  TopicId        Int             @id @default(autoincrement())
  Name           String? // Nullable
  Description    String? // Nullable
  ProposalTopics ProposalTopic[]
  TopicUsers     TopicUser[]
  ProjectTopics  ProjectTopic[]
}

model User {
  UserId         Int             @id @default(autoincrement())
  Sub            String? // Nullable
  UserName       String? // Nullable
  GivenName      String? // Nullable
  FamilyName     String? // Nullable
  Picture        String? // Nullable
  Name           String? // Nullable
  NickName       String? // Nullable
  Password       String? // Nullable
  Email          String? // Nullable
  Application    String? // Nullable
  EmailVerified  Boolean? // Nullable
  ProgramType    String? // Nullable
  UserLevel      String? // Nullable
  Expertise      String? // Nullable
  ProjectsAsCoach Project[] @relation("CoachProjects")
  ProjectsAsStudent Project[] @relation("StudentProjects")
  TopicUsers     TopicUser[]
}

model ProposalTopic {
  ProposalsProposalId Int
  TopicsTopicId       Int
  Proposal            Proposal @relation(fields: [ProposalsProposalId], references: [ProposalId], onDelete: Cascade)
  Topic               Topic    @relation(fields: [TopicsTopicId], references: [TopicId], onDelete: Cascade)

  @@id([ProposalsProposalId, TopicsTopicId])
}

model Project {
  ProjectId       Int          @id @default(autoincrement())
  CreatedAt       DateTime? // Nullable
  UpdatedAt       DateTime? // Nullable
  Title           String? // Nullable
  Description     String? // Nullable
  Stage           String? // Nullable
  Active          Boolean? // Nullable
  Supported       Boolean? // Nullable
  Reviewed        Boolean? // Nullable
  Approved        Boolean? // Nullable
  Feedback        String? // Nullable
  StudentId       Int? // Nullable
  CoachId         Int? // Nullable
  OrganisationId  Int? // Nullable
  ProposalId      Int? // Nullable

  Organisation    Organisation? @relation("OrganisationProjects", fields: [OrganisationId], references: [OrganisationId], map: "FK_Project_Organisation")
  Proposal        Proposal? @relation("ProposalProjects", fields: [ProposalId], references: [ProposalId], map: "FK_Project_Proposal")
  Coach           User? @relation("CoachProjects", fields: [CoachId], references: [UserId], map: "FK_Project_Coach")
  Student         User? @relation("StudentProjects", fields: [StudentId], references: [UserId], map: "FK_Project_Student")
  ProjectTopics   ProjectTopic[]
}

model TopicUser {
  TopicsTopicId   Int
  UsersUserId     Int
  Topic           Topic @relation(fields: [TopicsTopicId], references: [TopicId], onDelete: Cascade)
  User            User  @relation(fields: [UsersUserId], references: [UserId], onDelete: Cascade)

  @@id([TopicsTopicId, UsersUserId])
}

model ProjectTopic {
  ProjectsProjectId Int
  TopicsTopicId     Int
  Project           Project @relation(fields: [ProjectsProjectId], references: [ProjectId], onDelete: Cascade)
  Topic             Topic   @relation(fields: [TopicsTopicId], references: [TopicId], onDelete: Cascade)

  @@id([ProjectsProjectId, TopicsTopicId])
}
